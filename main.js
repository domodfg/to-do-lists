(()=>{"use strict";var t={426:(t,e,r)=>{r.d(e,{Z:()=>a});var n=r(537),o=r.n(n),c=r(645),i=r.n(c)()(o());i.push([t.id,".container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 50vh;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,YAAY;AAChB",sourcesContent:[".container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 50vh;\n}"],sourceRoot:""}]);const a=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,o,c){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(n)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(i[u]=!0)}for(var d=0;d<t.length;d++){var s=[].concat(t[d]);n&&i[s[0]]||(void 0!==c&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=c),r&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=r):s[2]=r),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),e.push(s))}},e}},537:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),c="/*# ".concat(o," */"),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([c]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var c={},i=[],a=0;a<t.length;a++){var u=t[a],d=n.base?u[0]+n.base:u[0],s=c[d]||0,l="".concat(d," ").concat(s);c[d]=s+1;var p=r(l),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var f=o(m,n);n.byIndex=a,e.splice(a,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function o(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var c=n(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<c.length;i++){var a=r(c[i]);e[a].references--}for(var u=n(t,o),d=0;d<c.length;d++){var s=r(c[d]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}c=u}}},569:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var c=r.sourceMap;c&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(c))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var c=e[n]={id:n,exports:{}};return t[n](c,c.exports,r),c.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0;var n={};(()=>{r.d(n,{O:()=>k});var t=r(379),e=r.n(t),o=r(795),c=r.n(o),i=r(569),a=r.n(i),u=r(565),d=r.n(u),s=r(216),l=r.n(s),p=r(589),m=r.n(p),f=r(426),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=a().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=l(),e()(f.Z,v),f.Z&&f.Z.locals&&f.Z.locals;const h=(()=>{const t=document.createElement("input"),e=document.createElement("label");t.setAttribute("required",""),t.setAttribute("id","title"),e.setAttribute("for","title"),e.textContent="Title: ";const r=document.createElement("input"),n=document.createElement("label");r.setAttribute("id","description"),n.setAttribute("for","description"),n.textContent="Description: ";const o=document.createElement("select");o.textContent="Priority",o.setAttribute("id","priority");const c=document.createElement("option");c.setAttribute("value","High"),c.textContent="High";const i=document.createElement("option");i.setAttribute("value","Mid"),i.textContent="Mid";const a=document.createElement("option");a.setAttribute("value","Low"),a.textContent="Low",o.appendChild(c),o.appendChild(i),o.appendChild(a);const u=document.createElement("label");u.setAttribute("for","priority"),u.textContent="Priority: ";const d=document.createElement("input");d.setAttribute("type","date");const s=document.createElement("button");s.setAttribute("type","button"),s.setAttribute("class","formSubmit"),s.textContent="Submit";const l=document.createElement("button");l.setAttribute("type","button"),l.textContent="Cancel";const p=document.createElement("form");return p.appendChild(e),p.appendChild(t),p.appendChild(n),p.appendChild(r),p.appendChild(u),p.appendChild(o),p.appendChild(d),p.appendChild(s),p.appendChild(l),{title:t,description:r,priority:o,dueDate:d,submit:s,cancel:l,form:p}})(),y=(()=>{const t=document.createElement("input"),e=document.createElement("label");t.setAttribute("required",""),t.setAttribute("id","title"),e.setAttribute("for","title"),e.textContent="Project Title: ";const r=document.createElement("button");r.setAttribute("type","button"),r.setAttribute("class","projectSubmit"),r.textContent="Submit";const n=document.createElement("form");return n.appendChild(e),n.appendChild(t),n.appendChild(r),{title:t,form:n,submit:r}})(),b=(()=>{const t=h.form,e=document.createElement("button");return e.textContent="Edit",e.setAttribute("class",".formEdit"),e.setAttribute("type","button"),{editForm:t,switchForm:()=>{e.removeAttribute("id"),t.appendChild(e)},formEditButton:e}})(),C=()=>{const t=document.querySelectorAll(".task"),e=document.querySelectorAll(".remove"),r=document.querySelectorAll(".edit");t.forEach(((t,e)=>{t.id=e})),e.forEach(((t,e)=>{t.id=e})),r.forEach(((t,e)=>{t.id=e}))},A=()=>{const t=document.querySelector(".taskContainer");document.querySelectorAll(".task").forEach((e=>{t.removeChild(e)}));for(let e=0;e<P.currentProject.array.length;e++){const r=document.createElement("div");r.textContent=P.currentProject.array[e].title,r.setAttribute("class","title"),document.createElement("div").textContent=P.currentProject.array[e].description;const n=document.createElement("div");n.textContent=P.currentProject.array[e].dueDate;const o=document.createElement("button");o.setAttribute("id",e),o.setAttribute("class","remove"),o.textContent="remove",o.addEventListener("click",(()=>{const e=document.querySelectorAll(".task");P.currentProject.array.splice(o.id,1),t.removeChild(e[o.id]),C(),console.log(P.currentProject)}));const c=document.createElement("div");c.setAttribute("id",e),c.setAttribute("class","task"),c.appendChild(r),c.appendChild(n),c.appendChild(o);const i=document.createElement("button");i.setAttribute("id",e),i.setAttribute("class","edit"),i.textContent="edit",i.addEventListener("click",(()=>{c.appendChild(b.editForm),b.switchForm(),b.formEditButton.setAttribute("id",i.id)})),c.appendChild(i),t.appendChild(c)}},E=(b.formEditButton.addEventListener("click",(()=>{const t=h.title.value,e=h.description.value,r=h.priority.value,n=h.dueDate.value;P.currentProject.array[b.formEditButton.id].title=t,P.currentProject.array[b.formEditButton.id].description=e,P.currentProject.array[b.formEditButton.id].priority=r,P.currentProject.array[b.formEditButton.id].dueDate=n,console.log(P.currentProject.array),A()})),()=>{const t=document.querySelector(".projectContainer");document.querySelectorAll(".project").forEach((e=>{t.removeChild(e)}));for(let e=0;e<g.projectList.length;e++){const r=document.createElement("a");r.textContent=g.projectList[e].title,r.setAttribute("id",e),r.setAttribute("class","projectTitle"),r.addEventListener("click",(()=>{P.currentProject=g.projectList[r.id],k.currentProjectTitle.textContent=P.currentProject.title,A()}));const n=document.createElement("button");n.setAttribute("id",e),n.setAttribute("class","projectRemove"),n.textContent="remove",n.addEventListener("click",(()=>{const e=document.querySelectorAll(".project");g.projectList.splice(n.id,1),t.removeChild(e[n.id]),j(),P.currentProject=P.today,k.currentProjectTitle.textContent=P.currentProject.title,A()}));const o=document.createElement("div");o.setAttribute("id",e),o.setAttribute("class","project"),o.appendChild(r),e>0&&o.appendChild(n),t.appendChild(o)}}),j=()=>{const t=document.querySelectorAll(".project"),e=document.querySelectorAll(".projectRemove"),r=document.querySelectorAll(".projectTitle");t.forEach(((t,e)=>{t.id=e})),e.forEach(((t,e)=>{t.id=e+1})),r.forEach(((t,e)=>{t.id=e}))},x=t=>({title:t,array:[]}),P=(()=>{const t=x("today");return{today:t,addTaskToArray:t=>{const e=(r=h.title.value,n=h.description.value,o=h.priority.value,c=h.dueDate.value,{title:r,description:n,priority:o,dueDate:c});var r,n,o,c;t.array.push(e)},currentProject:t}})(),g=(()=>{const t=[P.today];return{projectList:t,addtoProjectList:()=>{const e=y.title.value,r=x(e);t.push(r),console.log(t)}}})(),S=document.querySelector(".container"),T=document.querySelector(".currentProject"),L=document.createElement("button");L.textContent="New Tasks",L.addEventListener("click",(()=>{S.appendChild(h.form),h.form.appendChild(h.submit),h.submit.addEventListener("click",(()=>{h.title.checkValidity()?(P.addTaskToArray(P.currentProject),console.log(P.currentProject),h.title.value="",h.description.value="",h.dueDate.value="",A()):h.title.reportValidity()})),y.submit.addEventListener("click",(()=>{y.title.checkValidity()?(g.addtoProjectList(),y.title.value="",E()):y.title.reportValidity()}))})),S.appendChild(y.form),S.appendChild(L);const k=(()=>{const t=document.createElement("p");return t.textContent=P.currentProject.title,{currentProjectTitle:t,appendTitle:()=>T.appendChild(t)}})();A(),E(),k.appendTitle()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,